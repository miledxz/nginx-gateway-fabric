// Code generated by counterfeiter. DO NOT EDIT.
package runtimefakes

import (
	"context"
	"sync"
	"syscall"
	"time"

	"github.com/nginxinc/nginx-gateway-fabric/internal/mode/static/nginx/runtime"
)

type FakeProcessHandler struct {
	FindMainProcessStub        func(context.Context, runtime.CheckFileFunc, runtime.ReadFileFunc, time.Duration) (int, error)
	findMainProcessMutex       sync.RWMutex
	findMainProcessArgsForCall []struct {
		arg1 context.Context
		arg2 runtime.CheckFileFunc
		arg3 runtime.ReadFileFunc
		arg4 time.Duration
	}
	findMainProcessReturns struct {
		result1 int
		result2 error
	}
	findMainProcessReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	ReadFileStub        func(string) ([]byte, error)
	readFileMutex       sync.RWMutex
	readFileArgsForCall []struct {
		arg1 string
	}
	readFileReturns struct {
		result1 []byte
		result2 error
	}
	readFileReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	SysCallKillStub        func(int, syscall.Signal) error
	sysCallKillMutex       sync.RWMutex
	sysCallKillArgsForCall []struct {
		arg1 int
		arg2 syscall.Signal
	}
	sysCallKillReturns struct {
		result1 error
	}
	sysCallKillReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProcessHandler) FindMainProcess(arg1 context.Context, arg2 runtime.CheckFileFunc, arg3 runtime.ReadFileFunc, arg4 time.Duration) (int, error) {
	fake.findMainProcessMutex.Lock()
	ret, specificReturn := fake.findMainProcessReturnsOnCall[len(fake.findMainProcessArgsForCall)]
	fake.findMainProcessArgsForCall = append(fake.findMainProcessArgsForCall, struct {
		arg1 context.Context
		arg2 runtime.CheckFileFunc
		arg3 runtime.ReadFileFunc
		arg4 time.Duration
	}{arg1, arg2, arg3, arg4})
	stub := fake.FindMainProcessStub
	fakeReturns := fake.findMainProcessReturns
	fake.recordInvocation("FindMainProcess", []interface{}{arg1, arg2, arg3, arg4})
	fake.findMainProcessMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProcessHandler) FindMainProcessCallCount() int {
	fake.findMainProcessMutex.RLock()
	defer fake.findMainProcessMutex.RUnlock()
	return len(fake.findMainProcessArgsForCall)
}

func (fake *FakeProcessHandler) FindMainProcessCalls(stub func(context.Context, runtime.CheckFileFunc, runtime.ReadFileFunc, time.Duration) (int, error)) {
	fake.findMainProcessMutex.Lock()
	defer fake.findMainProcessMutex.Unlock()
	fake.FindMainProcessStub = stub
}

func (fake *FakeProcessHandler) FindMainProcessArgsForCall(i int) (context.Context, runtime.CheckFileFunc, runtime.ReadFileFunc, time.Duration) {
	fake.findMainProcessMutex.RLock()
	defer fake.findMainProcessMutex.RUnlock()
	argsForCall := fake.findMainProcessArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeProcessHandler) FindMainProcessReturns(result1 int, result2 error) {
	fake.findMainProcessMutex.Lock()
	defer fake.findMainProcessMutex.Unlock()
	fake.FindMainProcessStub = nil
	fake.findMainProcessReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessHandler) FindMainProcessReturnsOnCall(i int, result1 int, result2 error) {
	fake.findMainProcessMutex.Lock()
	defer fake.findMainProcessMutex.Unlock()
	fake.FindMainProcessStub = nil
	if fake.findMainProcessReturnsOnCall == nil {
		fake.findMainProcessReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.findMainProcessReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessHandler) ReadFile(arg1 string) ([]byte, error) {
	fake.readFileMutex.Lock()
	ret, specificReturn := fake.readFileReturnsOnCall[len(fake.readFileArgsForCall)]
	fake.readFileArgsForCall = append(fake.readFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ReadFileStub
	fakeReturns := fake.readFileReturns
	fake.recordInvocation("ReadFile", []interface{}{arg1})
	fake.readFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProcessHandler) ReadFileCallCount() int {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	return len(fake.readFileArgsForCall)
}

func (fake *FakeProcessHandler) ReadFileCalls(stub func(string) ([]byte, error)) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = stub
}

func (fake *FakeProcessHandler) ReadFileArgsForCall(i int) string {
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	argsForCall := fake.readFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeProcessHandler) ReadFileReturns(result1 []byte, result2 error) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = nil
	fake.readFileReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessHandler) ReadFileReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.readFileMutex.Lock()
	defer fake.readFileMutex.Unlock()
	fake.ReadFileStub = nil
	if fake.readFileReturnsOnCall == nil {
		fake.readFileReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.readFileReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessHandler) SysCallKill(arg1 int, arg2 syscall.Signal) error {
	fake.sysCallKillMutex.Lock()
	ret, specificReturn := fake.sysCallKillReturnsOnCall[len(fake.sysCallKillArgsForCall)]
	fake.sysCallKillArgsForCall = append(fake.sysCallKillArgsForCall, struct {
		arg1 int
		arg2 syscall.Signal
	}{arg1, arg2})
	stub := fake.SysCallKillStub
	fakeReturns := fake.sysCallKillReturns
	fake.recordInvocation("SysCallKill", []interface{}{arg1, arg2})
	fake.sysCallKillMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProcessHandler) SysCallKillCallCount() int {
	fake.sysCallKillMutex.RLock()
	defer fake.sysCallKillMutex.RUnlock()
	return len(fake.sysCallKillArgsForCall)
}

func (fake *FakeProcessHandler) SysCallKillCalls(stub func(int, syscall.Signal) error) {
	fake.sysCallKillMutex.Lock()
	defer fake.sysCallKillMutex.Unlock()
	fake.SysCallKillStub = stub
}

func (fake *FakeProcessHandler) SysCallKillArgsForCall(i int) (int, syscall.Signal) {
	fake.sysCallKillMutex.RLock()
	defer fake.sysCallKillMutex.RUnlock()
	argsForCall := fake.sysCallKillArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProcessHandler) SysCallKillReturns(result1 error) {
	fake.sysCallKillMutex.Lock()
	defer fake.sysCallKillMutex.Unlock()
	fake.SysCallKillStub = nil
	fake.sysCallKillReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessHandler) SysCallKillReturnsOnCall(i int, result1 error) {
	fake.sysCallKillMutex.Lock()
	defer fake.sysCallKillMutex.Unlock()
	fake.SysCallKillStub = nil
	if fake.sysCallKillReturnsOnCall == nil {
		fake.sysCallKillReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sysCallKillReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findMainProcessMutex.RLock()
	defer fake.findMainProcessMutex.RUnlock()
	fake.readFileMutex.RLock()
	defer fake.readFileMutex.RUnlock()
	fake.sysCallKillMutex.RLock()
	defer fake.sysCallKillMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProcessHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
